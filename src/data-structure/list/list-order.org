#+TITLE: 顺序线性表
#+DATE: <2018-02-03 Sat>
#+LAYOUT: post
#+OPTIONS: ^:{}
#+TAGS: C, data-structure
#+CATEGORIES: data-structure

* 描述
  这是一个线性表的实现，使用的是顺序的方式
  #+BEGIN_EXPORT html
    <!--more-->
  #+END_EXPORT
* 代码
  #+BEGIN_SRC C

    #include<stdio.h>
    #include<stdlib.h>

    #define TRUE	1
    #define FALSE	0
    #define OK	1
    #define ERROR	0
    #define INFESIBLE	-1
    #define OVERFLOW	-2
    #define MAXSIZE 100
    #define LISTINCREMENT 20

    typedef int Status;
    typedef int ElemType;

    /*定义链表结点*/
    typedef struct Node {
      ElemType data;

    } LinkNode;

    /*定义链表*/
    typedef struct {
      LinkNode *head;
      int length;
      int size;
    } LinkList;

    Status InitList(LinkList * pL);	//初始化
    Status DestroyList(LinkList *pL);	//删除线性表
    Status ClearList(LinkList * pL);	//将线性表置为空表
    Status ListEmpty(LinkList L);	//检验线性表是否为空
    int ListLength(LinkList L);	//得到线性表长度
    Status GetElem(LinkList L, int i, LinkNode * pe);	//得到第 i 个线性表元素

    int LocateElem(LinkList L, LinkNode e,
                   Status(*compare) (LinkNode search, LinkNode test));
    /*返回与 e 相等的结点的位置,如果无则返回 0
     * 对于 compare 函数，第一个参数 search 是要查找的值
     * 第二个参数 test 是来回替换的值，假如返回 OK，则输出
     * 否则，继续往下循环*/

    Status PriorElem(LinkList L, LinkNode e, LinkNode * pe_pre);
    /*找到元素的前驱，让 pe_pre 指向前驱 */

    Status NextElem(LinkList L, LinkNode e, LinkNode * pe_next);
    /*找到元素的后继，让 pe_next 指向后继 */

    Status ListInsert(LinkList * pL, int i, LinkNode e);	//插入元素

    Status ListDelete(LinkList * pL, int i, LinkNode * pe);
    /*删除结点,并将指针 pe 指向删除结点 */

    Status ListTraverse(LinkList L, Status(*visit) (LinkNode e));
    /*通过 visit 函数遍历线性表 */

    Status print(LinkNode e)
    {
      printf("%d\n", e.data);
      return OK;
    }

    Status equals(LinkNode a, LinkNode b)
    {
      if (a.data == b.data)
        return TRUE;
      else
        return FALSE;
    }

    int main(int argc, char **argv)
    {

      LinkList L;
      InitList(&L);
      LinkNode e;
      int j;
      for (j = 1; j < 10; j++) {
        e.data = j;
        ListInsert(&L, j, e);
      }
      ListTraverse(L, print);
      return 0;
    }

    Status InitList(LinkList * pL)
    {
      pL->head = malloc(MAXSIZE * sizeof(LinkNode));
      if (pL->head == NULL)
        exit(OVERFLOW);
      pL->length = 0;
      pL->size = MAXSIZE;
      return OK;
    }

    Status DestroyList(LinkList * pL)
    {
      free(pL->head);
      pL->head = NULL;
      pL->length = 0;

      return OK;
    }

    Status ClearList(LinkList * pL)
    {
      pL->length = 0;

      return OK;
    }

    Status ListEmpty(LinkList L)
    {
      if (L.length == 0)
        return TRUE;
      else
        return FALSE;
    }

    int ListLength(LinkList L)
    {
      return L.length;
    }

    Status GetElem(LinkList L, int i, LinkNode * pe)
    {
      *pe = L.head[i - 1];
      return OK;
    }

    int LocateElem(LinkList L, LinkNode e,
                   Status(*compare) (LinkNode search, LinkNode test))
    {
      int count;
      for (count = 0; count < L.length; count++) {

        if (compare(L.head[count], e))
          return count + 1;

      }

      return 0;
    }

    Status PriorElem(LinkList L, LinkNode e, LinkNode * pe_pre)
    {
      int j;

      /*flag 是判断是否找到相等，1 为找到，0 为没找到 */
      int flag = 0;
      for (j = 0; j < L.length; j++) {
        if (L.head[j].data == e.data) {
          flag = 1;
          break;
        }
      }
      if (flag == 0 || j == 0)
        return ERROR;

      *pe_pre = L.head[j - 1];
      return OK;
    }

    Status NextElem(LinkList L, LinkNode e, LinkNode * pe_next)
    {
      int j;

      /*flag 是判断是否找到相等，1 为找到，0 为没找到 */
      int flag = 0;
      for (j = 0; j < L.length; j++) {
        if (L.head[j].data == e.data) {
          flag = 1;
          break;
        }
      }
      if (flag == 0 || j == L.length - 1)
        return ERROR;

      *pe_next = L.head[j + 1];
      return OK;
    }

    Status ListInsert(LinkList * pL, int i, LinkNode e)
    {
      if (i < 1 || i > pL->length + 1)
        return ERROR;

      int j;

      if (pL->length >= pL->size) {

        pL->size += LISTINCREMENT;
        pL->head = realloc(pL->head, pL->size);
        if (pL->head == NULL)
          exit(OVERFLOW);

      }

      for (j = pL->length; j >= i; j--)
        pL->head[j] = pL->head[j - 1];

      pL->head[i - 1] = e;
      pL->length++;

      return OK;
    }

    Status ListDelete(LinkList * pL, int i, LinkNode * pe)
    {
      if (i < 1 || i > pL->length)
        return ERROR;

      /*因为角标是从 0 开始，所以 i--之后 i 是要删除的角标 */
      i--;
      *pe = pL->head[i];
      /*注意，此处 length--后，for 循环中赋值只到原线性表的倒数第二个 */
      pL->length--;

      for (; i < pL->length; i++)
        pL->head[i] = pL->head[i + 1];

      return OK;
    }

    Status ListTraverse(LinkList L, Status(*visit) (LinkNode e))
    {
      int i;
      for (i = 0; i < L.length; i++) {
        if (!visit(L.head[i]))
          return ERROR;

      }
      return OK;
    }

  #+END_SRC
