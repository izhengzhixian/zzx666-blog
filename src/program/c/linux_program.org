#+TITLE: linux 编程
#+DATE: <2018-02-03 Sat>
#+LAYOUT: post
#+OPTIONS: ^:{}
#+TAGS: program, C, linux
#+CATEGORIES: program, C

* linux 网络编程
** 函数介绍
*** 连接函数
    描述: 创建套接字函数

    #+BEGIN_SRC C
      #include <sys/socket.h>
      int socket(int domain, int type,int protocol);
    #+END_SRC

    参数说明:

    domin: 地址协议族，AF_UNIX(系统进程通信)，AF_INET(网络通信)，POSIX 实现时把 AF 改成了 PF

    type: 套结字类型，SOCK_STREAM 表明我们用的是 TCP 协议,这样会提供按顺序的,可靠,双向,面向连接的比特流.
    SOCK_DGRAM 表明我们用的是 UDP 协议,这样只会提供定长的,不可靠,无连接的通信.

    protocol: 由于我们指定了 type,所以这个地方我们一般只要用 0 来代替就可以了 socket 为网络通讯做基本的准备.

    返回值:

    成功时返回文件描述符,失败时返回-1,看 errno 可知道出错的详细情况.

    #+BEGIN_EXPORT html
      <!--more-->
    #+END_EXPORT

    描述: 用一个本地地址，绑定套接字

    #+BEGIN_SRC C
      #include<sys/socket.h>
      int bind(int sockfd, struct sockaddr *my_addr, int addrlen);
    #+END_SRC

    参数说明:

    sockfd: 套接字的文件描述符

    my_addr: 地址结构体的指针

    addrlen: sockaddr 的长度

    返回值:

    成功是返回 0，失败返回-1

    补充:

    #+BEGIN_SRC C
      //这个是给计算机看的
      #include <sys/socket.h>
      struct sockaddr{
        unisgned short  as_family;
        char            sa_data[14];
      };
      //这个是给人类使用的
      #include <netinet/in.h>
      struct sockaddr_in{
        unsigned short          sin_family;  //一般设置为 AF_INET
        unsigned short int      sin_port;
        struct in_addr          sin_addr;
        unsigned char           sin_zero[8];  //填充 0，为将来扩展使用
      }
    #+END_SRC

    PS: 很重要的一点，sockaddr_in 中的成员都是网络字节序(大端)，一般的计算机都是小端，
    所以需要转换，转换函数在最后讲解


    描述: 监听套接字所绑定的地址

    #+BEGIN_SRC C
      #include <sys/socket.h>
      int listen(int sockfd,int backlog);
    #+END_SRC

    参数说明:

    sockfd:是 bind 后的文件描述符.

    backlog:设置请求排队的最大长度.当有多个客户端程序和服务端相连时, 使用这个表示可以介绍的排队长度.

    listen 函数将 bind 的文件描述符变为监听套接字.返回的情况和 bind 一样

    返回值:

    成功是返回 0，失败返回-1


    描述: 从等待队列中取得一个连接，返回套结字，如果没有，则阻塞

    #+BEGIN_SRC C
      #include <sys/socket.h>
      int accept(int sockfd, struct sockaddr *addr,int *addrlen);
    #+END_SRC

    参数说明:

    sockfd:是 listen 后的文件描述符.

    addr,addrlen 是用来给客户端的程序填写的,服务器端只要传递指针就可以了.

    返回值:

    accept 成功时返回最后的服务器端的文件描述符,失败时返回-1

    描述:
    connect 函数是客户端用来同服务端连接的.

    #+BEGIN_SRC C
      #include <sys/socket.h>
      int connect(int sockfd, struct sockaddr * serv_addr,int addrlen);
    #+END_SRC

    参数说明:

    sockfd:socket 返回的文件描述符.

    serv_addr:储存了服务器端的连接信息.其中 sin_add 是服务端的地址

    addrlen:serv_addr 的长度

    返回值:

    成功时返回 0,失败时返回-1.

*** 转换函数
    描述: 大小端转换函数

    #+BEGIN_SRC C
      #include <arpa/inet.h>
      unsigned long  int htonl(unsigned long  int hostlong);
      unsigned short int htons(unisgned short int hostshort);
      unsigned long  int ntohl(unsigned long  int netlong);
      unsigned short int ntohs(unsigned short int netshort);
      //在这四个转换函数中,h 代表 host, n 代表 network.s 代表 short l 代表 long
    #+END_SRC

    描述:

    gethostbyname 可以将机器名(如 linux.yessun.com)转换为一个结构指针.在这个结构里面储存了域名的信息

    gethostbyaddr 可以将一个 32 位的 IP 地址(C0A80001)转换为结构指针.

    #+BEGIN_SRC C
      struct hostent *gethostbyname(const char *hostname);
      struct hostent *gethostbyaddr(const char *addr,int len,int type);
      struct hostent{
        char *h_name;           /* 主机的正式名称  */
        char *h_aliases;        /* 主机的别名 */
        int   h_addrtype;       /* 主机的地址类型  AF_INET*/
        int   h_length;         /* 主机的地址长度  对于 IP4 是 4 字节 32 位*/
        char **h_addr_list;     /* 主机的 IP 地址列表 */
      }

    #+END_SRC

    返回值:

    这两个函数失败时返回 NULL 且设置 h_errno 错误变量,调用 h_strerror()可以得到详细的出错信息

    #+BEGIN_SRC C
      #inlcude <arpa/inet.h>
      int inet_aton(const char *cp,struct in_addr *inp); //返回 1 成功，0 失败
      char *inet_ntoa(struct in_addr in);
      // 函数里面 a 代表 ascii n 代表 network.第一个函数表示将 a.b.c.d 的 IP 转换为 32 位的 IP
      // 存储在 inp 指针里面.第二个是将 32 位 IP 转换为 a.b.c.d 的格式.
    #+END_SRC

*** 读写函数
    描述: read 函数是负责从 fd 中读取内容.

    #+BEGIN_SRC C
      #include <unistd.h>
      size_t read(int fd,void *buf,size_t nbyte);
    #+END_SRC

    返回值:

    当读成功时,read 返回实际所读的字节数
    如果返回的值是 0 表示已经读到文件的结束了,小于 0 表示出现了错误.
    如果错误为 EINTR 说明读是由中断引起的,如果是 ECONNREST 表示网络连接出了问题.

    描述: write 函数将 buf 中的 nbytes 字节内容写入文件描述符 fd.

    #+BEGIN_SRC C
      #include <unistd.h>
      size_t write(int fd,const void *buf,size_t nbytes);
    #+END_SRC

    返回值:
    成功时返回写的字节数.失败时返回-1. 并设置 errno 变量.
    在网络程序中,当我们向套接字文件描述符写时有俩种可能.

    1)write 的返回值大于 0,表示写了部分或者是全部的数据.

    2)返回的值小于 0,此时出现了错误.我们要根据错误类型来处理.

    如果错误为 EINTR 表示在写的时候出现了中断错误.
    如果为 EPIPE 表示网络连接出现了问题(对方已经关闭了连接).


    描述: 用于 UDP 读写的两个函数

    #+BEGIN_SRC C
      #include <sys/socket.h>
      int recvfrom(int sockfd,void *buf,int len,unsigned int flags,struct sockaddr * from int *fromlen);
      int sendto(int sockfd,const void *msg,int len,unsigned int flags,struct sockaddr *to int tolen);
    #+END_SRC

    参数说明:

    sockfd,buf,len 的意义和 read,write 一样,分别表示套接字描述符,发送或接收的缓冲区及大小.

    recvfrom 负责从 sockfd 接收数据,如果 from 不是 NULL,那么在 from 里面存储了信息来源的情况,

    如果对信息的来源不感兴趣,可以将 from 和 fromlen 设置为 NULL.

    sendto 负责向 to 发送信息.此时在 to 里面存储了收信息方的详细资料.

*** 高级套结字函数
    recv 和 send 函数提供了和 read 和 write 差不多的功能.不过它们提供 了第四个参数来控制读写操作.

    #+BEGIN_SRC C
      #include <sys/socket.h>
      int recv(int sockfd,void *buf,int len,int flags);
      int send(int sockfd,void *buf,int len,int flags);
    #+END_SRC

    参数说明:

    前面的三个参数和 read,write 一样,第四个参数可以是 0 或者是以下的组合
    |---------------+-----------------------------------|
    | MSG_DONTROUTE | 不查找路由表                      |
    | MSG_OOB       | 接受或者发送带外数据              |
    | MSG_PEEK      | 查看数据,并不从系统缓冲区移走数据 |
    | MSG_WAITALL   | 等待所有数据                      |
    |---------------+-----------------------------------|

    MSG_DONTROUTE:是 send 函数使用的标志.这个标志告诉 IP 协议.目的主机在本地网络上面,没有必要查找路由表.
    这个标志一般用网络诊断和路由程序里面.

    MSG_OOB:表示可以接收和发送带外的数据.

    MSG_PEEK:是 recv 函数的使用标志,表示只是从系统缓冲区中读取内容,而不清除系统缓冲区的内容.这样下次读的时候,
    仍然是一样的内容.一般在有多个进程读写数据时可以使用这个标志.

    MSG_WAITALL 是 recv 函数的使用标志,表示等到所有的信息到达时才返回.使用这个标志的时候 recv 回一直阻塞,直到指定的条件满足,或者是发生了错误.
    1)当读到了指定的字节时,函数正常返回.返回值等于 len
    2)当读到了文件的结尾时,函数正常返回.返回值小于 len
    3) 当操作发生错误时,返回-1,且设置错误为相应的错误号(errno)

    如果 flags 为 0,则和 read,write 一样的操作.还有其它的几个选项,不过我们实际上用的很少。

*** 关闭套结字

    描述:

    TCP 连接是双向的(是可读写的),当我们使用 close 时,会把读写通道都关闭,

    有时侯我们希望只关闭一个方向,这个时候我们可以使用 shutdown.

    针对不同的 howto,系统回采取不同的关闭方式.

    #+BEGIN_SRC C
      #include <sys/socket.h>
      int shutdown(int sockfd,int howto)
    #+END_SRC

    参数说明:

    howto=0 这个时候系统会关闭读通道.但是可以继续往接字描述符写.

    howto=1 关闭写通道,和上面相反,着时候就只可以读了.

    howto=2 关闭读写通道,和 close 一样 在多进程程序里面,如果有几个子进程共享一个套接字时,如果我们使用 shutdown,
    那么所有的子进程都不能够操作了,这个时候我们只能够使用 close 来关闭子进程的套接字描述符.

** tcp
   #+ATTR_HTML: :alt server 与 client 通信过程
   [[file:linux_program/linux_program_tcp.jpg]]

*** server
    bind,listen 和 accept 是服务器端用的函数。

    要创建一个服务器，需要先用 socket 创建一个套结字，然后 bind 一个网络地址，接着监听这个套结字。
    最后根据我们的需要，用不同的方式使用 accept 获取客户端套结字。
*** client
    先用 socket 创建一个套结字，然后根据需要 bind 一个网络地址，如果不绑定，会随机一个网络地址。
    一般我们不会绑定，因为客户端的地址没什么意义。最后 connect 服务器。与服务器通信。最后关闭。

** udp
*** server
    创建套结字，bind 网络地址，接收数据
*** client
    创建套结字，根据需要 bind 网络地址，发送数据
